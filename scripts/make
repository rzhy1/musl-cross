#!/bin/bash

set -e

TARGET="x86_64-w64-mingw32"

# packages
sudo apt-get update
sudo apt-get install -y --no-install-recommends \
  automake \
  bison \
  bzip2 \
  ca-certificates \
  curl \
  file \
  flex \
  g++ \
  gawk \
  gdb \
  git \
  gperf \
  help2man \
  libncurses-dev \
  libssl-dev \
  libtool-bin \
  make \
  patch \
  pkg-config \
  python3 \
  rsync \
  texinfo \
  unzip \
  wget \
  xz-utils

# patch
pushd builder
for i in ../targets/${TARGET}/*; do
    if [[ $i == *.patch ]]; then
        patch -Np1 -i $i
    fi
done
popd

# crosstool-ng
if [ ! -e /usr/bin/ct-ng ]; then
    pushd builder
    ./bootstrap
    ./configure --prefix=/usr
    make -j`nproc`
    sudo make install
    popd
fi

# build
sudo mkdir -p /opt
sudo chmod 0777 /opt
mkdir -p build
cp targets/${TARGET}/config build/.config
pushd build
ct-ng olddefconfig

echo "开始执行ct-ng build"
ct-ng build
popd

# tarball
URL="https://github.com/rzhy1/build-mingw-w64/releases/download/mingw-w64/mingw-w64-x86_64-toolchain.zip"
if ! curl -SLf -o "/tmp/toolchain.zip" "${URL}"; then
  echo "下载工具链失败" >&2
  exit 1
fi

# 解压工具链
if ! unzip -o "/tmp/toolchain.zip" -d "/tmp/mingw64"; then
  echo "解压工具链失败" >&2
  exit 1
fi

# 获取解压后的工具链目录
EXTRACTED_TOOLCHAIN_DIR="/tmp/mingw64"

# 检查目标目录是否存在
if [ ! -d "/opt/x-tools/${TARGET}" ]; then
  echo "目标目录不存在，请先构建工具链" >&2
  exit 1
fi

# 覆盖工具链
if ! rsync -avr "${EXTRACTED_TOOLCHAIN_DIR}/" "/opt/x-tools/${TARGET}/"; then
    echo "覆盖工具链失败" >&2
    exit 1
fi

# 删除临时文件
rm -f "/tmp/toolchain.zip"
sudo mv /opt/x-tools/${TARGET} .
sudo chown -R root:root ${TARGET}
sudo tar -cJvf ${TARGET}.tar.xz ${TARGET}
sudo sha256sum ${TARGET}.tar.xz | awk '{ print $1 }' > ${TARGET}.tar.xz.sha256
