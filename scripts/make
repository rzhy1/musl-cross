#!/bin/bash

set -e

TARGET=$1

# packages
sudo apt-get update
sudo apt-get install -y --no-install-recommends \
  automake \
  bison \
  bzip2 \
  ca-certificates \
  curl \
  file \
  flex \
  g++ \
  gawk \
  gdb \
  git \
  gperf \
  help2man \
  libncurses-dev \
  libssl-dev \
  libtool-bin \
  make \
  patch \
  pkg-config \
  python3 \
  rsync \
  texinfo \
  unzip \
  wget \
  xz-utils

# patch
pushd builder
git reset --hard HEAD
git clean -fd
for i in ../targets/${TARGET}/*; do
    if [[ $i == *.patch ]]; then
        patch -Np1 -i $i
    fi
done
popd

# crosstool-ng
sudo mkdir -p /opt
sudo chmod 0777 /opt
sudo rm -rf /opt/ct-ng
pushd builder
./bootstrap
./configure --prefix=/opt/ct-ng
make -j`nproc`
sudo make install
popd

# build
rm -rf build
mkdir -p build
cp targets/${TARGET}/config build/.config
pushd build
/opt/ct-ng/bin/ct-ng olddefconfig

echo "显示原版 .config"
cat $(pwd)/.config
echo "原版 .config 显示结束"

# 更新依赖库版本
sed -i "s/^CT_ISL_VERSION=\"[^\"]*\"/CT_ISL_VERSION=\"0.27\"/" $(pwd)/.config
sed -i "s/^CT_MPFR_VERSION=\"[^\"]*\"/CT_MPFR_VERSION=\"4.2.2\"/" $(pwd)/.config
sed -i "s/^CT_ZSTD_VERSION=\"[^\"]*\"/CT_ZSTD_VERSION=\"1.5.7\"/" $(pwd)/.config

# mingw-w64-master 最新版 (使用 Git)
mingw-w64-master() {
  echo "正在配置 mingw-w64 以使用 Git master 分支..."
  sed -i "s/^CT_MINGW_W64_MIRRORS=/# CT_MINGW_W64_MIRRORS=/" $(pwd)/.config
  sed -i "s/^CT_MINGW_W64_ARCHIVE_FILENAME=/# CT_MINGW_W64_ARCHIVE_FILENAME=/" $(pwd)/.config
  sed -i "s/^CT_MINGW_W64_ARCHIVE_DIRNAME=/# CT_MINGW_W64_ARCHIVE_DIRNAME=/" $(pwd)/.config
  sed -i "s/^CT_MINGW_W64_SIGNATURE_FORMAT=/# CT_MINGW_W64_SIGNATURE_FORMAT=/" $(pwd)/.config
  
  {
    echo "#"
    echo "# mingw-w64 Git master Configuration"
    echo "CT_MINGW_W64_VCS_TYPE=\"git\""
    echo "CT_MINGW_W64_VCS_URL=\"https://github.com/mingw-w64/mingw-w64.git\""
    echo "CT_MINGW_W64_VCS_REVISION=\"master\""
  } >> $(pwd)/.config
}

# gcc-master 最新版 (使用 Git 镜像)
gcc-master() {
  echo "正在配置 GCC 以使用 GitHub Git 镜像的 master 分支..."
  sed -i "s/^CT_GCC_MIRRORS=/# CT_GCC_MIRRORS=/" $(pwd)/.config
  sed -i "s/^CT_GCC_ARCHIVE_FILENAME=/# CT_GCC_ARCHIVE_FILENAME=/" $(pwd)/.config
  sed -i "s/^CT_GCC_ARCHIVE_DIRNAME=/# CT_GCC_ARCHIVE_DIRNAME=/" $(pwd)/.config
  
  {
    echo "#"
    echo "# GCC Git master Configuration (from GitHub Mirror)"
    echo "CT_GCC_VCS_TYPE=\"git\""
    echo "CT_GCC_VCS_URL=\"https://github.com/gcc-mirror/gcc.git\"" # <-- 已修复
    echo "CT_GCC_VCS_REVISION=\"master\""
  } >> $(pwd)/.config
  
  sed -i '/^# CT_GCC_PATCH_NONE is not set/a CT_GCC_PATCH_NONE=y' $(pwd)/.config
}

# --- 启用函数 ---
mingw-w64-master
gcc-master

echo "显示新版 .config"
cat $(pwd)/.config
echo "显示结束"

# 添加 --verbose 标志以获取更详细的日志
/opt/ct-ng/bin/ct-ng build --verbose
popd

# tarball
sudo mv /opt/x-tools/${TARGET} .
sudo chown -R root:root ${TARGET}
sudo tar -cJvf ${TARGET}.tar.xz ${TARGET}
sudo sha256sum ${TARGET}.tar.xz | awk '{ print $1 }' > ${TARGET}.tar.xz.sha256
